name: Stall POS Extensions

on:
  push:
    branches:
      - main
    paths:
      - "extensions/**"
      - ".github/workflows/**"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies at root
        run: bun install

      - name: Run tests at root
        run: bun test || echo "No tests found"

  deploy-to-r2:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Build, version check, and upload changed extensions
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          set -e

          # Identify which extension directories have changed
          CHANGED_EXTENSIONS=$(git diff --name-only HEAD~1 HEAD | grep '^extensions/' | awk -F'/' '{print $1 "/" $2}' | uniq)

          if [ -z "$CHANGED_EXTENSIONS" ]; then
            echo "No extensions were changed. Nothing to deploy."
            exit 0
          fi

          echo "üöÄ Found changed extensions to deploy:"
          echo "$CHANGED_EXTENSIONS"

          # Install the AWS S3 SDK with Bun (S3-compatible with R2)
          echo "Installing @aws-sdk/client-s3 with Bun..."
          bun add @aws-sdk/client-s3

          for ext_dir in $CHANGED_EXTENSIONS; do
            if [ -f "$ext_dir/package.json" ]; then
              echo "üì¶ Processing: $ext_dir"
              (
                cd "$ext_dir"

                pkg_name=$(jq -r '.name | sub("@stallpos/"; "")' package.json)
                pkg_version=$(jq -r '.version' package.json)
                R2_OBJECT_KEY="${pkg_name}/${pkg_version}/index.js"

                echo "Installing dependencies..."
                bun install

                echo "Building asset..."
                bun run build || echo "‚ö†Ô∏è No build script or build failed"

                SOURCE_FILE="dist/index.js"
                if [ ! -f "$SOURCE_FILE" ]; then
                  echo "‚ùå Build artifact not found at $SOURCE_FILE."
                  exit 1
                fi

                # Create a temporary JS script for R2 operations using AWS SDK
                cat << EOF > r2-upload.js
                const fs = require('fs');
                const { S3Client, HeadObjectCommand, PutObjectCommand } = require('@aws-sdk/client-s3');

                (async () => {
                  const client = new S3Client({
                    region: 'auto',
                    endpoint: \`https://${process.env.CLOUDFLARE_ACCOUNT_ID}.r2.cloudflarestorage.com\`,
                    credentials: {
                      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
                      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
                    },
                  });

                  const bucket = process.env.R2_BUCKET_NAME;
                  const key = '${R2_OBJECT_KEY}';
                  const filePath = '${SOURCE_FILE}';

                  // Check if object exists
                  try {
                    await client.send(new HeadObjectCommand({ Bucket: bucket, Key: key }));
                    console.error('‚ùå Error: Version already exists in R2. Please increment the version number.');
                    process.exit(1);
                  } catch (err) {
                    if (err.name !== 'NotFound') {
                      console.error('‚ùå Unexpected error during existence check:', err);
                      process.exit(1);
                    }
                    console.log('‚úÖ Version does not exist. Proceeding...');
                  }

                  // Upload the file
                  const fileContent = fs.readFileSync(filePath);
                  await client.send(new PutObjectCommand({
                    Bucket: bucket,
                    Key: key,
                    Body: fileContent,
                    ContentType: 'application/javascript',
                  }));
                  console.log('‚úÖ Successfully uploaded to R2.');
                })();
                EOF

                echo "Checking and uploading ${pkg_name}@${pkg_version} to R2..."
                bun run r2-upload.js

                # Clean up the temporary script
                rm -f r2-upload.js
              )
            fi
          done
