name: Stall POS Extensions

on:
  push:
    branches:
      - main
    paths:
      - "extensions/**"
      - ".github/workflows/**"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun test || echo "No tests found"

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Identify changed extensions and publish
        env:
          NPM_TOKEN: ${{ secrets.npm_token }}
        run: |
          set -e

          # Get a list of directories that have changed between this commit and the previous one.
          # We look for changes inside the 'extensions/' path.
          # awk and uniq ensure we get each directory name only once.
          CHANGED_EXTENSIONS=$(git diff --name-only HEAD~1 HEAD | grep '^extensions/' | awk -F'/' '{print $1 "/" $2}' | uniq)

          if [ -z "$CHANGED_EXTENSIONS" ]; then
            echo "No extensions were changed. Nothing to publish."
            exit 0
          fi

          echo "üöÄ Found changed extensions to publish:"
          echo "$CHANGED_EXTENSIONS"

          for ext_dir in $CHANGED_EXTENSIONS; do
            if [ -f "$ext_dir/package.json" ]; then
              echo "üì¶ Processing: $ext_dir"

              # Create a subshell to handle directory changes safely
              (
                cd "$ext_dir"

                # Create .npmrc in the current directory for authentication
                echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc

                # The name-patching logic is kept in case a new, unscoped extension is added.
                original_name=$(jq -r '.name' package.json)
                if [[ "$original_name" != @stallpos/* ]]; then
                  unscoped_name=$(basename "$original_name")
                  new_name="@stallpos/$unscoped_name"
                  echo "üîß Patching name: $original_name ‚Üí $new_name"
                  jq --arg new_name "$new_name" '.name = $new_name' package.json > package.json.tmp && mv package.json.tmp package.json
                else
                  echo "‚úÖ Name is already scoped: $original_name"
                fi

                echo "Installing dependencies with bun..."
                bun install

                echo "Building..."
                bun run build || echo "‚ö†Ô∏è No build script or build failed"

                echo "Publishing to npm with bun..."
                bun publish --access public

                # Clean up the auth file
                rm -f .npmrc
              )
            else
              echo "‚ö†Ô∏è No package.json found in changed directory: $ext_dir"
            fi
          done
